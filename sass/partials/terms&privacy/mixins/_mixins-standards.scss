
@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}
/*    usage
p {
  @include font-size(14px)
}
*/
//Breakpoints
// Define the breakpoints

@mixin screen($size, $type: max) {

  @if $size == 'mobile-small' {
    @media screen and ($type + -width: $mobile-small) {
        @content;
    }
  }

  @if $size == 'mobile-large' {
    @media screen and ($type + -width: $mobile-large) {
        @content;
    }
  }

  @if $size == 'tablet-small' {
    @media screen and ($type + -width: $tablet-small) {
        @content;
    }
  }

  @else if $size == 'tablet-large' {
    @media screen and ($type + -width: $tablet-large) {
        @content;
    }
  }

  @else if $size == 'desktop-small' {
    @media screen and ($type + -width: $desktop-small) {
        @content;
    }
  }

 @else if $size == 'desktop-large' {
    @media screen and ($type + -width: $desktop-large) {
        @content;
    }
  }



}
/*      usage
.foo {
  @include screen(large) {
    width: 20%;
  }
  @include screen(med) {
    width: 40%;
  }
  @include screen(med-small) {
    width: 60%;
  }
  @include screen(small) {
    width: 80%;
  }
  @include screen(custom, max, 400) {
    width: 100%;
  }
}
*/

@mixin bp-small {
  @media screen and (max-width: $mobile-large) {
    @content;
  }
}

@mixin bp-medium {
  @media screen and (max-width: $tablet-large) {
    @content;
  }
}

@mixin bp-large {
  @media screen and (max-width: $desktop-large) and (min-width: 1025px) {
    @content;
  }

}

//Animations and keyframes
@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }
    @keyframes #{$animation-name} {
        @content;
    }
}
@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}
/*      usage
@include keyframes(slide-down) {
  0% { opacity: 1; }
  90% { opacity: 0; }
}

.element {
  width: 100px;
  height: 100px;
  background: black;
  @include animation('slide-down 5s 3');
}
*/
//Transitions
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}
@mixin transition-delay($delay...) {
    -moz-transition-delay:    $delay;
    -o-transition-delay:      $delay;
    -webkit-transition-delay: $delay;
    transition-delay:         $delay;
}
/*      usage
a {
  color: gray;
  @include transition(color .3s ease);
  &:hover {
    color: black;
  }
}
*/
//Cross browser opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}
/*      usage
.faded-text {
  @include opacity(0.8);
}
*/
//Clearfix
%clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}
/*      usage
.container-with-floated-children {
  @extend %clearfix;
}
*/
//Centering Elements
@mixin center($position,$distance) {
  position: absolute;

  @if $position == 'vertical' {
    top: $distance;
    -webkit-transform: translateY(-$distance);
    -ms-transform: translateY(-$distance);
    transform: translateY(-$distance);
  }

  @else if $position == 'horizontal' {
    left: $distance;
    -webkit-transform: translateX(-$distance);
    -ms-transform: translateX(-$distance);
    transform: translate(-$distance);
  }

  @else if $position == 'both' {
    top: $distance;
    left: $distance;
    -webkit-transform: translate(-$distance, -$distance);
    -ms-transform: translate(-$distance, -$distance);
    transform: translate(-$distance, -$distance);
  }

}
/*      usage
.foo {
  @include center(both);
}
.foo-parent {
  position: relative;
}
*/
//Hiding and Showing Elements with a Transition
@mixin fade($type) {

  @if $type == 'hide' {
    visibility: hidden;
    opacity: 0;
    transition: visibility 1s, opacity 1s;
  }

  @else if $type == 'show' {
    visibility: visible;
    opacity: 1;
    transition: visibility 1s, opacity 1s;
  }

}
/*      usage
.foo .bar {
  @include fade(hide);
}
.foo:hover .bar {
  @include fade(show);
}
*/

//black-screen
@mixin black-screen() {
position: fixed;
top: 0;
width: 100%;
border-radius: 2px;
height: 100%;
background-color: rgba(0, 0, 0, 0.6);
z-index: -1;
-webkit-filter: blur(5px);
filter: blur(5px);
}
/*      usage

*/
//
@mixin cover-background($img-uri, $background-top:"center", $background-left:"center", $background-attachment:"fixed") {
  background: url($img-uri) no-repeat unquote($background-top) unquote($background-left) unquote($background-attachment);
  @include background-size(cover);
  z-index: -2;

}
/*      usage

*/
//blur
@mixin blur ($radius) {
	-webkit-filter: blur($radius+px); /* Chrome, Safari */
	-ms-filter: blur($radius+px); /* IE12? */
	filter: url("data:image/svg+xml;utf8,<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><filter id=\"blur\"><feGaussianBlur stdDeviation=\"#{$radius}\" /></filter></svg>#blur"); /* Firefox, Safari, Chrome*/
	filter: progid:DXImageTransform.Microsoft.Blur(Strength=$radius); /* IE9 */
}
/*      usage

*/
//search-bar
@mixin search-bar($width){
  box-sizing: border-box;
  border: 1px solid #ccc;
  border-radius: 0px;
  font-size: 16px;
  background-color: white;
  background-repeat: no-repeat;
  padding: 12px 10px 12px 10px;
  width: $width;
}

/*      usage

*/
@mixin box-shadow($top, $left, $blur, $color, $inset:"") {

      -webkit-box-shadow:$top $left $blur $color #{$inset};
      -moz-box-shadow:$top $left $blur $color #{$inset};
      box-shadow:$top $left $blur $color #{$inset};
    }
